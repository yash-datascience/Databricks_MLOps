name: Databricks-CI-CD

# Manual trigger with parameters

on:
# Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      # This is the path of your notebooks in Git.  Currently, this is not recursively deploying notebooks
      GIT_NOTEBOOK_PATH:
        description: 'Notebooks Relative Path in Git'
        required: true
        default: 'notebooks/MyProject'

      # This is where in your Databricks workspace your notebooks will be deployed
      # Typically this is under a Folder under the Workspace and not under a specific user's folder
      NOTEBOOK_DEPLOYMENT_PATH:
        description: 'Notebooks Deployment Path to Databricks'
        required: true
        default: '/MyProject'

#       # This resource group for the Databricks workspace and KeyVault
      RESOURCE_GROUP:
        description: 'Resource Group Name'
        required: true
        default: 'Databricks-MyProject-MG'

      # The Azure region to which to deploy your resources
      LOCATION:
        description: 'Azure Region'
        required: true
        default: 'EastUS2'

      # This is the name of your Azure Databricks resource
      WORKSPACE_NAME:
        description: 'Databricks workspace name'
        required: true
        default: 'Databricks-MyProject-MG'

      # This is a KeyVault for holding the Service Principal to make Databricks API calls and to hold Databricks KeyVault backed Secrets
      KEY_VAULT_NAME:
        description: 'KeyVault name'
        required: true
        default: 'KeyVault-MyProject7'

      # This is a KeyVault for holding the Service Principal to make Databricks API calls and to hold Databricks KeyVault backed Secrets
      SUBSCRIPTION_ID:
        description: 'Azure Subscription Id'
        required: true
        default: ''

      # Inialize the system
      # Note: We only want to run the KeyVault ARM template once.  If you keep re-running, then you will OVERWRITE your values
      MODE:
        description: 'Deployment Mode (Databricks or Initialize-KeyVault)'
        required: true
        default: 'Databricks'

jobs:
  #############################################################
  # Builds the code
  # Currently this is not building and JAR files, but you would do that here
  # This is packaging up the files from Git to the Artifacts files
  #############################################################
  Build:
    runs-on: ubuntu-latest

    # Checkout code
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Show the environment variables for debugging
    - name: Display Environment Variable
      uses: azure/powershell@v1
      with:
        inlineScript: |
          dir env:
        azPSVersion: '3.1.0'

    # Publish Artifact: ARM-Templates
    - name: 'Publish Artifact: ARM-Templates' 
      uses: actions/upload-artifact@v2
      with:
        name: 'ARM-Templates'
        path: '${{ github.workspace }}/ARM-Templates'

    # Publish Artifact: Databricks-Clusters
    - name: 'Publish Artifact: Databricks-Clusters' 
      uses: actions/upload-artifact@v2
      with:
        name: 'clusters'
        path: '${{ github.workspace }}/clusters'

    # Publish Artifact: Databricks-Notebooks
    - name: 'Publish Artifact: Databricks-Notebooks' 
      uses: actions/upload-artifact@v2
      with:
        name: 'notebooks'
        path: '${{ github.workspace }}/notebooks'

    # Publish Artifact: Databricks-Jobs
    - name: 'Publish Artifact: Databricks-Jobs' 
      uses: actions/upload-artifact@v2
      with:
        name: 'jobs'
        path: '${{ github.workspace }}/jobs'

    # Publish Artifact: Databricks-Init-Scripts
    - name: 'Publish Artifact: Databricks-Init-Scripts' 
      uses: actions/upload-artifact@v2
      with:
        name: 'init-scripts'
        path: '${{ github.workspace }}/init-scripts'

    # Publish Artifact: Databricks-Deployment-Scripts
    - name: 'Publish Artifact: Databricks-Deployment-Scripts' 
      uses: actions/upload-artifact@v2
      with:
        name: 'deployment-scripts'
        path: '${{ github.workspace }}/deployment-scripts'                                


#############################################################
# Deploy to Dev
#############################################################
  Dev:
    needs: Build
    runs-on: ubuntu-latest
    env:
      resourceGroupName: 'Databricks-MyProject-MG-Dev'
      databricksWorkspaceName: 'Databricks-MyProject-MG-Dev'
      keyVaultName: 'KeyVault-MyProject7-Dev'
      NotebookDeploymentPath: '/MyProject'
      GitNotebookPath: 'notebooks/MyProject'

    steps:
    # Show the environment variables for debugging
    - name: Display Environment Variable
      uses: azure/powershell@v1
      with:
        inlineScript: |
          dir env:
        azPSVersion: '3.1.0'        

    # Download Artifact: ARM-Templates
    - name: 'Download Artifact: ARM-Templates' 
      uses: actions/download-artifact@v2
      with:
        name: 'ARM-Templates'
        path: ${{ github.workspace }}/ARM-Templates

    # Download Artifact: Databricks-Clusters
    - name: 'Download Artifact: Databricks-Clusters' 
      uses: actions/download-artifact@v2
      with:
        name: 'clusters'
        path: ${{ github.workspace }}/clusters

    # Download Artifact: Databricks-Notebooks
    - name: 'Download Artifact: Databricks-Notebooks' 
      uses: actions/download-artifact@v2
      with:
        name: 'notebooks'
        path: ${{ github.workspace }}/notebooks

    # Download Artifact: Databricks-Jobs
    - name: 'Download Artifact: Databricks-Jobs' 
      uses: actions/download-artifact@v2
      with:
        name: 'jobs'
        path: ${{ github.workspace }}/jobs

    # Download Artifact: Databricks-Init-Scripts
    - name: 'Download Artifact: Databricks-Init-Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'init-scripts'
        path: ${{ github.workspace }}/init-scripts

    # Download Artifact: Deployment Scripts
    - name: 'Download Artifact: Deployment Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'deployment-scripts'
        path: ${{ github.workspace }}/deployment-scripts
        
    # Login to Azure
    - name: Login via Az module
      uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # set this if you will be using PowerShell
        # enable-AzPSSession: true 

    # Deploy Databricks Workspace
    - name: Deploy ARM Template (Databricks)
      uses: azure/CLI@v1
      # if: ${{ github.event.inputs.MODE == 'SKIP FOR TESTING' }}
      with:
        inlineScript: |
          az group create --location 'EastUS2' --name 'Databricks-MyProject-MG-Dev'
          az deployment group create --resource-group 'Databricks-MyProject-MG-Dev' --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.databricks.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.databricks.json --parameters workspaceName='Databricks-MyProject-MG-Dev'
    # Deploy Azure KeyVault
    - name: Deploy ARM Template (KeyVault)
      uses: azure/CLI@v1
      if: ${{ github.event.inputs.MODE == 'Initialize-KeyVault' }}
      with:
        inlineScript: |
          az group create --location "${{ github.event.inputs.LOCATION }}" --name "${{ env.resourceGroupName }}"
          az deployment group create --resource-group ${{ env.resourceGroupName }} --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.keyvault.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.keyvault.json --parameters keyVaultName="${{ env.keyVaultName }}"
    # Download KeyVault Secrets
    - name: Download KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1.0
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      with:
        keyvault: 'KeyVault-MyProject7-Dev'
        secrets: 'databricks-dev-ops-subscription-id,databricks-dev-ops-tenant-id,databricks-dev-ops-client-id,databricks-dev-ops-client-secret'
      id: databricksSecretAction

    # Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
    - name:  Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
    #  if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/init-scripts"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Clusters
    - name: Deploy Databricks Clusters
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/clusters"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Notebooks
    - name: Deploy Databricks Notebooks
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/notebooks/MyProject"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }} ${{ env.NotebookDeploymentPath }}
    # Deploy Databricks Jobs
    - name: Deploy Databricks Jobs
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/jobs"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
#############################################################
# Deploy to QA
#############################################################
  QA:
    needs: Dev
    runs-on: ubuntu-latest
    environment:
        name: Staging
    env:
      resourceGroupName: 'Databricks-MyProject-MG-QA'
      databricksWorkspaceName: 'Databricks-MyProject-MG-QA'
      keyVaultName: 'KeyVault-MyProject7-QA'
      NotebookDeploymentPath: '/MyProject'
      GitNotebookPath: 'notebooks/MyProject'

    steps:
    # Show the environment variables for debugging
    - name: Display Environment Variable
      uses: azure/powershell@v1
      with:
        inlineScript: |
          dir env:
        azPSVersion: '3.1.0'        

    # Download Artifact: ARM-Templates
    - name: 'Download Artifact: ARM-Templates' 
      uses: actions/download-artifact@v2
      with:
        name: 'ARM-Templates'
        path: ${{ github.workspace }}/ARM-Templates

    # Download Artifact: Databricks-Clusters
    - name: 'Download Artifact: Databricks-Clusters' 
      uses: actions/download-artifact@v2
      with:
        name: 'clusters'
        path: ${{ github.workspace }}/clusters

    # Download Artifact: Databricks-Notebooks
    - name: 'Download Artifact: Databricks-Notebooks' 
      uses: actions/download-artifact@v2
      with:
        name: 'notebooks'
        path: ${{ github.workspace }}/notebooks

    # Download Artifact: Databricks-Jobs
    - name: 'Download Artifact: Databricks-Jobs' 
      uses: actions/download-artifact@v2
      with:
        name: 'jobs'
        path: ${{ github.workspace }}/jobs

    # Download Artifact: Databricks-Init-Scripts
    - name: 'Download Artifact: Databricks-Init-Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'init-scripts'
        path: ${{ github.workspace }}/init-scripts

    # Download Artifact: Deployment Scripts
    - name: 'Download Artifact: Deployment Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'deployment-scripts'
        path: ${{ github.workspace }}/deployment-scripts
        
    # Login to Azure
    - name: Login via Az module
      uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # set this if you will be using PowerShell
        # enable-AzPSSession: true 

    # Deploy Databricks Workspace
    - name: Deploy ARM Template (Databricks)
      uses: azure/CLI@v1
      # if: ${{ github.event.inputs.MODE == 'SKIP FOR TESTING' }}
      with:
        inlineScript: |
          az group create --location 'EastUS2' --name 'Databricks-MyProject-MG-QA'
          az deployment group create --resource-group 'Databricks-MyProject-MG-QA' --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.databricks.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.databricks.json --parameters workspaceName='Databricks-MyProject-MG-QA'
    # Deploy Azure KeyVault
    - name: Deploy ARM Template (KeyVault)
      uses: azure/CLI@v1
      if: ${{ github.event.inputs.MODE == 'Initialize-KeyVault' }}
      with:
        inlineScript: |
          az group create --location "${{ github.event.inputs.LOCATION }}" --name "${{ env.resourceGroupName }}"
          az deployment group create --resource-group ${{ env.resourceGroupName }} --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.keyvault.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.keyvault.json --parameters keyVaultName="${{ env.keyVaultName }}"
    # Download KeyVault Secrets
    - name: Download KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1.0
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      with:
        keyvault: ${{ env.keyVaultName }}
        secrets: 'databricks-dev-ops-subscription-id,databricks-dev-ops-tenant-id,databricks-dev-ops-client-id,databricks-dev-ops-client-secret'
      id: databricksSecretAction

    # Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
    - name:  Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/init-scripts"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Clusters
    - name: Deploy Databricks Clusters
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/clusters"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Notebooks
    - name: Deploy Databricks Notebooks
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/notebooks/MyProject"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }} ${{ env.NotebookDeploymentPath }}
    # Deploy Databricks Jobs
    - name: Deploy Databricks Jobs
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/jobs"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
#############################################################
# Deploy to Prod
#############################################################
  Prod:
    needs: QA
    runs-on: ubuntu-latest
    environment:
        name: Prod
    env:
      resourceGroupName: 'Databricks-MyProject-MG-Prod'
      databricksWorkspaceName: 'Databricks-MyProject-MG-Prod'
      keyVaultName: 'KeyVault-MyProject7-Prod'
      NotebookDeploymentPath: '/MyProject'
      GitNotebookPath: 'notebooks/MyProject'

    steps:
    # Show the environment variables for debugging
    - name: Display Environment Variable
      uses: azure/powershell@v1
      with:
        inlineScript: |
          dir env:
        azPSVersion: '3.1.0'        

    # Download Artifact: ARM-Templates
    - name: 'Download Artifact: ARM-Templates' 
      uses: actions/download-artifact@v2
      with:
        name: 'ARM-Templates'
        path: ${{ github.workspace }}/ARM-Templates

    # Download Artifact: Databricks-Clusters
    - name: 'Download Artifact: Databricks-Clusters' 
      uses: actions/download-artifact@v2
      with:
        name: 'clusters'
        path: ${{ github.workspace }}/clusters

    # Download Artifact: Databricks-Notebooks
    - name: 'Download Artifact: Databricks-Notebooks' 
      uses: actions/download-artifact@v2
      with:
        name: 'notebooks'
        path: ${{ github.workspace }}/notebooks

    # Download Artifact: Databricks-Jobs
    - name: 'Download Artifact: Databricks-Jobs' 
      uses: actions/download-artifact@v2
      with:
        name: 'jobs'
        path: ${{ github.workspace }}/jobs

    # Download Artifact: Databricks-Init-Scripts
    - name: 'Download Artifact: Databricks-Init-Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'init-scripts'
        path: ${{ github.workspace }}/init-scripts

    # Download Artifact: Deployment Scripts
    - name: 'Download Artifact: Deployment Scripts' 
      uses: actions/download-artifact@v2
      with:
        name: 'deployment-scripts'
        path: ${{ github.workspace }}/deployment-scripts
        
    # Login to Azure
    - name: Login via Az module
      uses: azure/login@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # set this if you will be using PowerShell
        # enable-AzPSSession: true 

    # Deploy Databricks Workspace
    - name: Deploy ARM Template (Databricks)
      uses: azure/CLI@v1
      # if: ${{ github.event.inputs.MODE == 'SKIP FOR TESTING' }}
      with:
        inlineScript: |
          az group create --location 'EastUS2' --name 'Databricks-MyProject-MG-Prod'
          az deployment group create --resource-group 'Databricks-MyProject-MG-Prod' --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.databricks.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.databricks.json --parameters workspaceName='Databricks-MyProject-MG-Prod'
    # Deploy Azure KeyVault
    - name: Deploy ARM Template (KeyVault)
      uses: azure/CLI@v1
      if: ${{ github.event.inputs.MODE == 'Initialize-KeyVault' }}
      with:
        inlineScript: |
          az group create --location "${{ github.event.inputs.LOCATION }}" --name "${{ env.resourceGroupName }}"
          az deployment group create --resource-group ${{ env.resourceGroupName }} --template-file $GITHUB_WORKSPACE/ARM-Templates/azuredeploy.keyvault.json --parameters @$GITHUB_WORKSPACE/ARM-Templates/parameters.keyvault.json --parameters keyVaultName="${{ env.keyVaultName }}"
    # Download KeyVault Secrets
    - name: Download KeyVault Secrets
      uses: Azure/get-keyvault-secrets@v1.0
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      with:
        keyvault: ${{ env.keyVaultName }}
        secrets: 'databricks-dev-ops-subscription-id,databricks-dev-ops-tenant-id,databricks-dev-ops-client-id,databricks-dev-ops-client-secret'
      id: databricksSecretAction

    # Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
    - name:  Deploy your Databricks Init Scripts to dbfa:/init-scripts folder on DBFS
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/init-scripts"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-init-scripts.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Clusters
    - name: Deploy Databricks Clusters
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/clusters"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-clusters.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
    # Deploy Databricks Notebooks
    - name: Deploy Databricks Notebooks
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/notebooks/MyProject"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-notebooks.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }} ${{ env.NotebookDeploymentPath }}
    # Deploy Databricks Jobs
    - name: Deploy Databricks Jobs
      #if: ${{ github.event.inputs.MODE == 'Databricks' }}
      run: |
        cd "$GITHUB_WORKSPACE/jobs"
        chmod +x $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh
        $GITHUB_WORKSPACE/deployment-scripts/deploy-jobs.sh ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-tenant-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-id }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-client-secret }} ${{ steps.databricksSecretAction.outputs.databricks-dev-ops-subscription-id }} ${{ env.resourceGroupName }} ${{ env.databricksWorkspaceName }}
